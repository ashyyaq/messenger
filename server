#define WIN32_LEAN_AND_MEAN // Директива, исключающие некоторые заголовки Windows

#include <iostream> 
#include <Windows.h> 
#include <WinSock2.h> 
#include <WS2tcpip.h>

using namespace std;

int main() {
    WSADATA wsaData;
    ADDRINFO hints; 
    ADDRINFO* addrResult; // Структура с информацией об адресе
    SOCKET ListenSocket = INVALID_SOCKET; // Для прослушивания входящих подключений
    SOCKET ConnectSocket = INVALID_SOCKET; // Подключение для общения с клиентом
    char recvBuffer[512]; // Буфер для приема данных от клиента

    const char* sendBuffer = "Hello from server"; // Сообщение для отправки клиенту

    // Инициализация сокетов 
    int result = WSAStartup(MAKEWORD(2, 2), &wsaData); 
    if (result != 0) {
        cout << "WSAStartup failed with result: " << result << endl;
        return 1; // Выход с сообщением об ошибке
    }

    ZeroMemory(&hints, sizeof(hints)); // Обнуление буфера для приема сообщений
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM; 
    hints.ai_protocol = IPPROTO_TCP; // Протокол TCP
    hints.ai_flags = AI_PASSIVE; // Флаг для автоматического назначения адреса

    // Получение информации об адресе
    result = getaddrinfo(NULL, "666", &hints, &addrResult); // Запрос адреса с портом 666
    if (result != 0) {
        cout << "getaddrinfo failed with error: " << result << endl;
        freeaddrinfo(addrResult); // Освобождение ресурсов 
        WSACleanup(); // Очистка сокетов видоус
        return 1;
    }

    // Создание сокета для прослушивания
    ListenSocket = socket(addrResult->ai_family, addrResult->ai_socktype, addrResult->ai_protocol); 
    if (ListenSocket == INVALID_SOCKET) {
        cout << "Socket creation failed" << endl;
        freeaddrinfo(addrResult); // Освобождение ресурсов 
        WSACleanup(); // Очистка сокетов видоус
        return 1;
    }

    // Привязка сокета к адресу
    result = bind(ListenSocket, addrResult->ai_addr, (int)addrResult->ai_addrlen);
    if (result == SOCKET_ERROR) {
        cout << "Bind failed, error: " << result << endl;
        closesocket(ListenSocket); // Закрытие сокета
        freeaddrinfo(addrResult); // Освобождение ресурсов 
        WSACleanup(); // Очистка сокетов видоус
        return 1; 
    }

    // Запуск прослушивания на сокете
    result = listen(ListenSocket, SOMAXCONN);
    if (result == SOCKET_ERROR) {
        cout << "Listen failed, error: " << result << endl;
        closesocket(ListenSocket); // Закрытие сокета
        freeaddrinfo(addrResult); // Освобождение ресурсов 
        WSACleanup(); // Очистка сокетов видоус
        return 1; 
    }

    // Принятие входящего подключения
    ConnectSocket = accept(ListenSocket, NULL, NULL);
    if (ConnectSocket == INVALID_SOCKET) {
        cout << "Accept failed, error: " << WSAGetLastError() << endl;
        closesocket(ListenSocket); // Закрытие сокета
        freeaddrinfo(addrResult); // Освобождение ресурсов 
        WSACleanup(); // Очистка сокетов видоус
        return 1; 
    }

    // Закрытие сокета 
    closesocket(ListenSocket);

    // Цикл обработки подключений
    do {
        ZeroMemory(recvBuffer, 512); // Обнуление буфера для приема сообщений

        // Получение данных от клиента
        result = recv(ConnectSocket, recvBuffer, 512, 0);
        if (result > 0) {
            cout << "Received " << result << " bytes" << endl; // Сколько байтов получено --
            cout << "Received data: " << recvBuffer << endl;

            // Отправка данных клиенту
            result = send(ConnectSocket, sendBuffer, (int)strlen(sendBuffer), 0);
            if (result == SOCKET_ERROR) {
                cout << "Send failed, error: " << result << endl;
                closesocket(ConnectSocket); // Закрытие сокета
                freeaddrinfo(addrResult); // Освобождение ресурсов 
                WSACleanup(); // Очистка сокетов видоус
                return 1;
            }
        }
        else if (result == 0) {
            cout << "Connection closing" << endl; // Клиент отключился
        }
        else {
            cout << "Recv failed, error: " << WSAGetLastError() << endl;
            closesocket(ConnectSocket); // Закрытие сокета
            freeaddrinfo(addrResult); // Освобождение ресурсов 
            WSACleanup(); // Очистка сокетов видоус
            return 1;
        }
    } while (result > 0); // Цикл продолжается, если данные получаются

    // Закрытие сокета для отправки данных
    result = shutdown(ConnectSocket, SD_SEND);
    if (result == SOCKET_ERROR) {
        cout << "Shutdown failed, error: " << result << endl;
        closesocket(ConnectSocket); // Закрытие сокета
        freeaddrinfo(addrResult); // Освобождение ресурсов 
        WSACleanup(); // Очистка сокетов видоус
        return 1; 
    }

    closesocket(ConnectSocket); // Закрытие сокета
    freeaddrinfo(addrResult); // Освобождение ресурсов 
    WSACleanup(); // Очистка сокетов видоус

    return 0; 
}
